<?xml version="1.0" encoding="UTF-8"?>

<rule-definition xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.optimyth.com/schema/definitions/rule" version="1.0">
  <rule id="CUS.KIUWAN.RULES.JUNIT.Plugin">
    <java-class>cus.kiuwan.rules.junit.Junit4KiuwanPlugin</java-class>
    <java-version>1.8</java-version>
    <tags>JUnit,Plugin</tags>
    <reference><![CDATA[https://junit.org/junit4/]]></reference>
    <parameters/>
    <code-examples>
      <code-example id="codeExample">
        <ko><![CDATA[Not applicable]]></ko>
        <ok><![CDATA[Not applicable]]></ok>
      </code-example>
    </code-examples>
    <incompatibilities/>
    <related-rules/>
    <criteria-values>
      <criterium-value ref="OPT.CRITERIUM_VALUE.LANGUAGE_PARSER.JAVA"/>
      <criterium-value ref="OPT.CRITERIUM_VALUE.PRIORITY.VERY_LOW"/>
      <criterium-value ref="OPT.CRITERIUM_VALUE.REPAIR_DIFFICULTY.LOW"/>
      <criterium-value ref="OPT.CRITERIUM_VALUE.CQM.MAINTAINABILITY"/>
      <criterium-value ref="OPT.CRITERIUM_VALUE.ENGINE.QAKING"/>
      <criterium-value ref="OPT.CRITERIUM_VALUE.VULNERABILITY_TYPE.OTHER"/>
    </criteria-values>
    <i18ns>
      <i18n ref="OPT.LANGUAGE.ENGLISH">
        <name><![CDATA[JUnit Plugin]]></name>
        <description><![CDATA[This rule works as a factory to generate 'JUnit' test violations.
It does never generates violations of itself, it is essetially a plugin that runs with the analysis to read the JUnit xml reports and generate JUnit violations.
It requires that you have run JUnit test on your project before the analysis and have the correspondent JUnit xml reports  somewhere in your source code directory]]></description>
        <remediation><![CDATA[]]></remediation>
        <configuration><![CDATA[]]></configuration>
        <benefits><![CDATA[
				]]></benefits>
        <drawbacks><![CDATA[
				]]></drawbacks>
        <parameters/>
      </i18n>
    </i18ns>
  </rule>
</rule-definition>
